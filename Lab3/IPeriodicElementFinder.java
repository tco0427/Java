/*
Lab7
과목명(분반): 자바프로그래밍1(2분반)
교수명: 박경신 교수님
학번: 32180472
학과: 컴퓨터공학과
이름: 김동규
제출일: 2020/05/26
 */

//어노테이션은 자바 컴파일러에게 메시지를 전달하는 목적의 메모로 볼 수 있는데(메타데이터)
//@FunctionalInterface는 함수형 인터페이스에 부합하는지 확인하기 위한 어노테이션 타입이다.
//만약 둘 이상의 추상 메소드가 존재한다면 이는 함수형 인터페이스가 아니기 때문에 컴파일 에러로 이어진다.
//그러나 static,default선언이 붙은 메소드(자체로 완전한 메소드)는 함수형 인터페이스의 정의에 아무런 영향을 미치지 않는다.
//단 추상클래스가 추상 메소드를 하나만 가지고 있다고 하더라도 이는 인터페이스가 아니기 때문에 이를 함수형 인터페이스라고 볼 수 없고
//@FunctionalInterface는 컴파일 오류를 나타낸다.
//IPeriodicElementFinder는 하나의 추상메소드만을 가지므로 함수형 인터페이스라고 할 수 있다.
@FunctionalInterface
//다음의 인터페이스는 이를 구현하는 객체가 제공하는 기능에 대한 명세이다.(객체의 기능을 공개한 표준화 문서와 같다)
//사용자는 구현의 내용은 모르더라도 인터페이스에 명세된대로 가져다가 사용할 수 있다.(선언과 구현 분리)
public interface IPeriodicElementFinder {
    //다음의 추상메소드를 선언하였다. IPeriodicElementFinder를 구현하는 클래스에서는 다음의 추상메소드를 반드시 구현하여 주어야한다.
    //만약 구현하지 않는다면 그 클래스는 추상클래스가 될 것이다.
    //인터페이스 내의 추상메소드는 public abstract로 간주하고 이를 생략가능하다.
    //다음의 메소드도 public abstract가 선언되어 있는 것과 같다.
    boolean isInstanceOf(PeriodicElement pe);
}
